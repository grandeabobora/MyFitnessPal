ggdendro(hclust(dist(BigMac2003, method="manhattan")))
?ggdendro
ggdendrogram(hclust(dist(BigMac2003, method="manhattan")))
distancias <- dist(BigMac2003, method="manhattan")
ggdendrogram(hclust(distancias))
names(distancias)
distancias
col(distancias)
colnames(distancias)
row.names(distancias)
distancias
rownames(distancias)
is.data.frame(distancias)
as.data.frame(distancias)
as.matrix(distancias, labels=TRUE)
distancias <- as.matrix(distancias, labels=TRUE)
names(distancias)
col.names(distancias)
colnames(distancias)
distancias %>%
select("Rio_De_Janeiro")
distancias <- dist(BigMac2003, method="manhattan")
ggdendrogram(hclust(distancias))
distancias <- as.data.frame(as.matrix(distancias, labels=TRUE))
distancias %>%
select("Rio_De_Janeiro")
distancias %>%
select("Rio_De_Janeiro") %>%
arrange(desc())
distancias %>%
select("Rio_De_Janeiro") %>%
arrange(desc(Rio_De_Janeiro))
distancias %>%
select("Rio_De_Janeiro") %>%
top_n(3)
distancias %>%
select("Rio_De_Janeiro") %>%
top_n(10)
distancias %>%
select("Rio_De_Janeiro")
distancias %>%
select("Rio_De_Janeiro")
distancias_rj <- distancias %>%
select("Rio_De_Janeiro")
distancias_rj
sort(distancias_rj)
order[distancias_rj$Rio_De_Janeiro]
distancias_rj[order(distancias_rj$Rio_De_Janeiro), ]
distancias_rj[order(distancias_rj$Rio_De_Janeiro), ]
distancias_rj$Cidade <- row.names(distancias_rj)
distancias_rj
row.names(distancias_rj) <- NULL
distancias_rj %>%
top_n()
distancias_rj %>%
top_n(3)
distancias_rj %>%
top_n(-3)
distancias_rj %>%
arrange(desc(Rio_De_Janeiro))
distancias_rj %>%
arrange(desc(Rio_De_Janeiro)) %>%
top_n(-3)
?top_n
distancias_rj %>%
arrange(Rio_De_Janeiro) %>%
head()
distancias_rj %>%
arrange(Rio_De_Janeiro) %>%
head(3)
b<-function(n,P=c(0.2,0.15,0.25,0.4)){
X<-1:n
U<-runif(n, 0, 1)
for(i in X){
j<-1
F<-P[1]
u<-U[i]
while(u>F){
j<-j+1
F<-F+P[j]
}
X[i]<-j
}
return(X)
}
b(10)
b(1)
b()
b(1)
b(2)
b(2)
b(2)
b(2)
b(2)
b(10)
b(10)
devtools::install_github('charlie86/spotifyr')
Sys.setenv(SPOTIFY_CLIENT_ID = '6498a45af5d8469e8415e1b261756992')
Sys.setenv(SPOTIFY_CLIENT_SECRET = 'ae1f587e8eba4a1794acf2218e0726ee')
access_token <- get_spotify_access_token()
library(spotifyr)
Sys.setenv(SPOTIFY_CLIENT_ID = '6498a45af5d8469e8415e1b261756992')
Sys.setenv(SPOTIFY_CLIENT_SECRET = 'ae1f587e8eba4a1794acf2218e0726ee')
access_token <- get_spotify_access_token()
beatles <- get_artist_audio_features('the beatles')
library(tidyverse)
library(knitr)
beatles %>%
count(key_mode, sort = TRUE) %>%
head(5) %>%
kable()
beatles %>%
count(key_mode, sort = TRUE)
beatles %>%
count(key_mode, sort = TRUE) %>%
print(n=Inf)
get_my_recently_played(limit = 5) %>%
select(track_name, artist_name, album_name, played_at_utc) %>%
kable()
get_my_top_artists(time_range = 'long_term', limit = 5) %>%
select(artist_name, artist_genres) %>%
rowwise %>%
mutate(artist_genres = paste(artist_genres, collapse = ', ')) %>%
ungroup
get_my_top_artists(time_range = 'long_term', limit = 10) %>%
select(artist_name, artist_genres) %>%
rowwise %>%
mutate(artist_genres = paste(artist_genres, collapse = ', ')) %>%
ungroup
get_my_top_tracks(time_range = 'short_term', limit = 5) %>%
select(track_name, artist_name, album_name)
joy <- get_artist_audio_features('joy division')
joy %>%
arrange(-valence) %>%
select(track_name, valence) %>%
head(5) %>%
kable()
ggridges
library(ggridges)
ggplot(joy, aes(x = valence, y = album_name)) +
geom_joy() +
theme_joy() +
ggtitle("Joyplot of Joy Division's joy distributions", subtitle = "Based on valence pulled from Spotify's Web API with spotifyr")
ggplot(joy, aes(x = valence, y = album_name)) +
geom_density_ridges() +
theme_joy() +
ggtitle("Joyplot of Joy Division's joy distributions", subtitle = "Based on valence pulled from Spotify's Web API with spotifyr")
ggplot(joy, aes(x = valence, y = album_name)) +
geom_density_ridges() +
theme_ridges() +
ggtitle("Joyplot of Joy Division's joy distributions", subtitle = "Based on valence pulled from Spotify's Web API with spotifyr")
?geom_density_ridges
ggplot(joy, aes(x = valence, y = album_name)) +
geom_density_ridges() +
theme_ridges() +
ggtitle("Joyplot of Joy Division's joy distributions", subtitle = "Based on valence pulled from Spotify's Web API with spotifyr")
paste("Distribuição da alegria nos álbuns de ", artista, sep="")
paste("Distribuição da alegria nos álbuns de ", artist, sep="")
artist <- 'vitor ramil'
artist <- "vitor ramil"
paste("Distribuição da alegria nos álbuns de ", artist, sep="")
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
paste("Distribuição da alegria nos álbuns de ", simpleCap(artist), sep="")
ggplot(joy, aes(x = valence, y = album_name)) +
geom_density_ridges() +
theme_ridges() +
labs(x="Valência", y="Álbum", title=paste("Distribuição da alegria nos álbuns de ", simpleCap(artist), sep=""))
dados <- get_artist_audio_features(artist)
dados %>%
arrange(-valence) %>%
select(track_name, valence) %>%
head(5)
ggplot(dados, aes(x = valence, y = album_name)) +
geom_density_ridges() +
theme_ridges() +
labs(x="Valência", y="Álbum", title=paste("Distribuição da alegria nos álbuns de ", simpleCap(artist), sep=""))
ggplot(dados, aes(x = valence, y = album_name)) +
geom_density_ridges() +
theme_ridges() +
labs(x="Valência", y="Álbum", subtitle=paste("Distribuição da alegria nos álbuns de ", simpleCap(artist), sep=""))
ggplot(dados, aes(x = valence, y = album_name)) +
geom_density_ridges() +
theme_ridges() +
labs(x="Valência", y="Álbum", title=simpleCap(artist), subtitle="Distribuição da Alegria")
artist <- "caetano veloso"
dados <- get_artist_audio_features(artist)
dados %>%
arrange(-valence) %>%
select(track_name, valence) %>%
head(5)
ggplot(dados, aes(x = valence, y = album_name)) +
geom_density_ridges() +
theme_ridges() +
labs(x="Valência", y="Álbum", title=simpleCap(artist), subtitle="Distribuição da Alegria")
artist <- "radiohead"
dados <- get_artist_audio_features(artist)
dados %>%
arrange(-valence) %>%
select(track_name, valence) %>%
head(5)
ggplot(dados, aes(x = valence, y = album_name)) +
geom_density_ridges() +
theme_ridges() +
labs(x="Valência", y="Álbum", title=simpleCap(artist), subtitle="Distribuição da Alegria")
artist <- "white stripes"
dados <- get_artist_audio_features(artist)
dados %>%
arrange(-valence) %>%
select(track_name, valence) %>%
head(5)
ggplot(dados, aes(x = valence, y = album_name)) +
geom_density_ridges() +
theme_ridges() +
labs(x="Valência", y="Álbum", title=simpleCap(artist), subtitle="Distribuição da Alegria")
library(checkpoint)
library(fortunes)
library(mscstts)
install.packages(c("checkpoint", "mscstts", "fortunes"), dependencies=TRUE)
set_ms_tts_key("8e61ae64924647d1a2833d68eeced78e")
library(checkpoint)
checkpoint("2018-08-14")
library(fortunes)
library(mscstts)
set_ms_tts_key("8e61ae64924647d1a2833d68eeced78e")
out <- ms_synthesize("hello, world!", output_format = "audio-16khz-128kbitrate-mono-mp3")
?set_ms_tts_key
var1<-rnorm(10,5000,1300)/1.15^1
var2<-rnorm(10,5000,1300)/1.15^2
var3<-rnorm(10,5000,1300)/1.15^3
for(i in 1:10){
name<-paste0('var',i)
assign(name,rnorm(3,5000,1300)/1.15^1)
}
ls()
rm(list=ls())
var1<-rnorm(10,5000,1300)/1.15^1
var2<-rnorm(10,5000,1300)/1.15^2
var3<-rnorm(10,5000,1300)/1.15^3
for(i in 1:10){
name<-paste0('var',i)
assign(name,rnorm(3,5000,1300)/1.15^1)
}
ls()
var1
for(i in 1:10){
name<-paste0('var',i)
assign(name,rnorm(3,5000,1300)/1.15^i)
}
var7
var8
regression_pairs=c("A~B", "C~D", "E~F", "G~H","I~J","K~L","M~N","O~P","Q~R")
regression_pairs
residuals.new <- list()
a=c(1,2,3,4,5)
b=c(6,7,8,9,10)
c=c(11,12,13,14,15)
d=c(16, 17, 18, 19, 20)
e=c(21,22,23,24,25)
f=c(26,27,28,29,30)
g=c(31,32,33,34,35)
h=c(36,37,38,39,40)
i=c(41,42,43,44,45)
residuals.new[[1]]=a
residuals.new[[2]]=b
residuals.new[[3]]=c
residuals.new[[4]]=d
residuals.new[[5]]=e
residuals.new[[6]]=f
residuals.new[[7]]=g
residuals.new[[8]]=h
residuals.new[[9]]=i
residuals.new
bestresults<-list()
best_pairs=c("A~B", "G~H", "Q~R")
best_pairs
best_pairs %in% regression_pairs
regression_pairs %in% best_pairs
indices <- regression_pairs %in% best_pairs
residuals.new[[indices]]
residuals.new[indices]
regression_pairs
best_pairs
indices
regression_pairs %in% best_pairs
residuals.new[indices]
install.packages("topicmodels")
sessionInfo()
??BigMac2003
setwd("~/Documents/Research/github/MyFitnessPal")
library(ggplot2)
library(dplyr)
library(forecast)
library(lubridate)
library(wesanderson)
library(scales)
library(zoo)
dados <- as_data_frame(read.table(file="data.csv", sep=",", header=TRUE))
dados <- dados %>%
select(-Calories)
dim(dados)
str(dados)
dados$Date           <- ymd(dados$Date)
dados$Year           <- year(dados$Date)
dados$Month          <- month(dados$Date)
dados$Day            <- day(dados$Date)
dados$GrupoDiaSemana <- wday(dados$Date, label=TRUE)
dados$GrupoMes       <- ymd(paste(dados$Year, dados$Month, "01", sep="-"))
g1 <- ggplot(data=dados, aes(x=Date)) +
labs(x="Data", y="Peso (kg)") +
geom_line(aes(y=Weight, colour="Peso Real")) +
#geom_line(aes(y=c(rep(NA,  6), rollmean(Weight,  7)), colour="MM 07 Dias")) +
geom_line(aes(y=c(rep(NA, 29), rollmean(Weight, 30)), colour="MM 30 Dias")) +
geom_line(aes(y=c(rep(NA, 89), rollmean(Weight, 90)), colour="MM 90 Dias")) +
scale_colour_manual("Legenda", values = wes_palette("Zissou1")[c(5, 3, 2)]) +
scale_y_continuous(breaks = round(seq(floor(min(dados$Weight)), ceiling(max(dados$Weight)), by=1), 1), minor_breaks=NULL, limits=c(min(dados$Weight), max(dados$Weight))) +
scale_x_date(breaks=seq(min(dados$Date), max(dados$Date), by="2 month"), date_labels="%b/%Y", minor_breaks=seq(min(dados$Date), max(dados$Date), by="2 month")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
annotate("text", ymd("2016-06-25"), 80, label="Buenos Aires", hjust=0.25) +
geom_segment(aes(x = ymd("2016-06-25"), y = 73, xend = ymd("2016-06-25"), yend = 79.5)) +
annotate("text", ymd("2017-01-12"), 78, label="Porto Alegre", hjust=0.25) +
geom_segment(aes(x = ymd("2017-01-12"), y = 77.5, xend = ymd("2017-01-12"), yend = 74)) +
annotate("text", ymd("2017-08-01"), 76, label="Comecei a correr na rua", hjust=0.25) +
geom_segment(aes(x = ymd("2017-08-01"), y = 72.5, xend = ymd("2017-08-01"), yend = 75.5)) +
annotate("text", ymd("2017-11-11"), 74, label="Parei de correr na rua", hjust=0.25) +
geom_segment(aes(x = ymd("2017-11-11"), y = 70.5, xend = ymd("2017-11-11"), yend = 73.5)) +
annotate("text", ymd("2017-12-26"), 70, label="Espanha", hjust=0.25) +
geom_segment(aes(x = ymd("2017-12-26"), y = 70.5, xend = ymd("2017-12-26"), yend = 71.5))
g1
ggplot(data=dados, aes(x=Date)) +
labs(x="Data", y="Peso (kg)") +
geom_line(aes(y=Weight, colour="Peso Real")) +
#geom_line(aes(y=c(rep(NA,  6), rollmean(Weight,  7)), colour="MM 07 Dias")) +
geom_line(aes(y=c(rep(NA, 29), rollmean(Weight, 30)), colour="MM 30 Dias")) +
geom_line(aes(y=c(rep(NA, 89), rollmean(Weight, 90)), colour="MM 90 Dias")) +
scale_colour_manual("Legenda", values = wes_palette("Zissou1")[c(5, 3, 2)]) +
scale_y_continuous(breaks = round(seq(floor(min(dados$Weight)), ceiling(max(dados$Weight)), by=1), 1), minor_breaks=NULL, limits=c(min(dados$Weight), max(dados$Weight))) +
scale_x_date(breaks=seq(min(dados$Date), max(dados$Date), by="2 month"), date_labels="%b/%Y", minor_breaks=seq(min(dados$Date), max(dados$Date), by="2 month")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
annotate("text", ymd("2016-06-25"), 80, label="Buenos Aires", hjust=0.25) +
geom_segment(aes(x = ymd("2016-06-25"), y = 73, xend = ymd("2016-06-25"), yend = 79.5)) +
annotate("text", ymd("2017-01-12"), 78, label="Porto Alegre", hjust=0.25) +
geom_segment(aes(x = ymd("2017-01-12"), y = 77.5, xend = ymd("2017-01-12"), yend = 74)) +
annotate("text", ymd("2017-08-01"), 76, label="Comecei a correr na rua", hjust=0.25) +
geom_segment(aes(x = ymd("2017-08-01"), y = 72.5, xend = ymd("2017-08-01"), yend = 75.5)) +
annotate("text", ymd("2017-11-11"), 74, label="Parei de correr na rua", hjust=0.25) +
geom_segment(aes(x = ymd("2017-11-11"), y = 70.5, xend = ymd("2017-11-11"), yend = 73.5)) +
annotate("text", ymd("2017-12-26"), 70, label="Espanha", hjust=0.25) +
geom_segment(aes(x = ymd("2017-12-26"), y = 70.5, xend = ymd("2017-12-26"), yend = 71.5))
ggplot(data=dados, aes(x=Date)) +
labs(x="Data", y="Peso (kg)") +
geom_line(aes(y=Weight, colour="Peso Real")) +
#geom_line(aes(y=c(rep(NA,  6), rollmean(Weight,  7)), colour="MM 07 Dias")) +
geom_line(aes(y=c(rep(NA, 29), rollmean(Weight, 30)), colour="MM 30 Dias")) +
geom_line(aes(y=c(rep(NA, 89), rollmean(Weight, 90)), colour="MM 90 Dias")) +
scale_colour_manual("Legenda", values = wes_palette("Zissou1")[c(5, 3, 2)]) +
scale_y_continuous(breaks = round(seq(floor(min(dados$Weight)), ceiling(max(dados$Weight)), by=1), 1), minor_breaks=NULL, limits=c(min(dados$Weight), max(dados$Weight))) +
scale_x_date(breaks=seq(min(dados$Date), max(dados$Date), by="2 month"), date_labels="%b/%Y", minor_breaks=seq(min(dados$Date), max(dados$Date), by="2 month")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
min(dados$Weight)
library(ggplot2)
library(dplyr)
library(forecast)
library(lubridate)
library(wesanderson)
library(scales)
library(zoo)
dados <- as_data_frame(read.table(file="data.csv", sep=",", header=TRUE))
dados <- dados %>%
select(-Calories)
dim(dados)
str(dados)
dados$Date           <- ymd(dados$Date)
dados$Year           <- year(dados$Date)
dados$Month          <- month(dados$Date)
dados$Day            <- day(dados$Date)
dados$GrupoDiaSemana <- wday(dados$Date, label=TRUE)
dados$GrupoMes       <- ymd(paste(dados$Year, dados$Month, "01", sep="-"))
g1 <- ggplot(data=dados, aes(x=Date)) +
labs(x="Data", y="Peso (kg)") +
geom_line(aes(y=Weight, colour="Peso Real")) +
#geom_line(aes(y=c(rep(NA,  6), rollmean(Weight,  7)), colour="MM 07 Dias")) +
geom_line(aes(y=c(rep(NA, 29), rollmean(Weight, 30)), colour="MM 30 Dias")) +
geom_line(aes(y=c(rep(NA, 89), rollmean(Weight, 90)), colour="MM 90 Dias")) +
scale_colour_manual("Legenda", values = wes_palette("Zissou1")[c(5, 3, 2)]) +
scale_y_continuous(breaks = round(seq(floor(min(dados$Weight)), ceiling(max(dados$Weight)), by=1), 1), minor_breaks=NULL, limits=c(min(dados$Weight), max(dados$Weight))) +
scale_x_date(breaks=seq(min(dados$Date), max(dados$Date), by="2 month"), date_labels="%b/%Y", minor_breaks=seq(min(dados$Date), max(dados$Date), by="2 month")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
annotate("text", ymd("2016-06-25"), 80, label="Buenos Aires", hjust=0.25) +
geom_segment(aes(x = ymd("2016-06-25"), y = 73, xend = ymd("2016-06-25"), yend = 79.5)) +
annotate("text", ymd("2017-01-12"), 78, label="Porto Alegre", hjust=0.25) +
geom_segment(aes(x = ymd("2017-01-12"), y = 77.5, xend = ymd("2017-01-12"), yend = 74)) +
annotate("text", ymd("2017-08-01"), 76, label="Comecei a correr na rua", hjust=0.25) +
geom_segment(aes(x = ymd("2017-08-01"), y = 72.5, xend = ymd("2017-08-01"), yend = 75.5)) +
annotate("text", ymd("2017-11-11"), 74, label="Parei de correr na rua", hjust=0.25) +
geom_segment(aes(x = ymd("2017-11-11"), y = 70.5, xend = ymd("2017-11-11"), yend = 73.5)) +
annotate("text", ymd("2017-12-26"), 70, label="Espanha", hjust=0.25) +
geom_segment(aes(x = ymd("2017-12-26"), y = 70.5, xend = ymd("2017-12-26"), yend = 71.5))
g1
library(ggplot2)
library(dplyr)
library(forecast)
library(lubridate)
library(wesanderson)
library(scales)
library(zoo)
# leitura de dados
dados <- as_data_frame(read.table(file="data.csv", sep=",", header=TRUE))
dados <- dados %>%
select(-Calories)
dim(dados)
str(dados)
dados$Date           <- ymd(dados$Date)
dados$Year           <- year(dados$Date)
dados$Month          <- month(dados$Date)
dados$Day            <- day(dados$Date)
dados$GrupoDiaSemana <- wday(dados$Date, label=TRUE)
dados$GrupoMes       <- ymd(paste(dados$Year, dados$Month, "01", sep="-"))
# grafico
g1 <- ggplot(data=dados, aes(x=Date)) +
labs(x="Data", y="Peso (kg)") +
geom_line(aes(y=Weight, colour="Peso Real")) +
#geom_line(aes(y=c(rep(NA,  6), rollmean(Weight,  7)), colour="MM 07 Dias")) +
geom_line(aes(y=c(rep(NA, 29), rollmean(Weight, 30)), colour="MM 30 Dias")) +
geom_line(aes(y=c(rep(NA, 89), rollmean(Weight, 90)), colour="MM 90 Dias")) +
scale_colour_manual("Legenda", values = wes_palette("Zissou1")[c(5, 3, 2)]) +
scale_y_continuous(breaks = round(seq(floor(min(dados$Weight)), ceiling(max(dados$Weight)), by=1), 1), minor_breaks=NULL, limits=c(min(dados$Weight), max(dados$Weight))) +
scale_x_date(breaks=seq(min(dados$Date), max(dados$Date), by="2 month"), date_labels="%b/%Y", minor_breaks=seq(min(dados$Date), max(dados$Date), by="2 month")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
annotate("text", ymd("2016-06-25"), 80, label="Buenos Aires", hjust=0.25) +
geom_segment(aes(x = ymd("2016-06-25"), y = 73, xend = ymd("2016-06-25"), yend = 79.5)) +
annotate("text", ymd("2017-01-12"), 78, label="Porto Alegre", hjust=0.25) +
geom_segment(aes(x = ymd("2017-01-12"), y = 77.5, xend = ymd("2017-01-12"), yend = 74)) +
annotate("text", ymd("2017-08-01"), 76, label="Comecei a correr na rua", hjust=0.25) +
geom_segment(aes(x = ymd("2017-08-01"), y = 72.5, xend = ymd("2017-08-01"), yend = 75.5)) +
annotate("text", ymd("2017-11-11"), 74, label="Parei de correr na rua", hjust=0.25) +
geom_segment(aes(x = ymd("2017-11-11"), y = 70.5, xend = ymd("2017-11-11"), yend = 73.5)) +
annotate("text", ymd("2017-12-26"), 70, label="Espanha", hjust=0.25) +
geom_segment(aes(x = ymd("2017-12-26"), y = 70.5, xend = ymd("2017-12-26"), yend = 71.5))
g1
pdf("grafico01.pdf")
g1
dev.off()
# analise a cada mes
g2 <- ggplot(data=dados, aes(x=GrupoMes, y=Weight, group=GrupoMes, fill=as.factor(GrupoMes))) +
labs(x="Meses", y="Peso (kg)") +
geom_boxplot() +
scale_fill_manual("Meses", values=rep(wes_palette(5, name="Zissou1"), 20)[1:length(unique(dados$GrupoMes))]) +
scale_y_continuous(breaks = round(seq(floor(min(dados$Weight)), ceiling(max(dados$Weight)), by=1), 1), limits=c(min(dados$Weight), max(dados$Weight))) +
scale_x_date(breaks=seq(min(dados$Date), max(dados$Date), by="1 month"), date_labels="%b/%Y", minor_breaks=seq(min(dados$Date), max(dados$Date), by="1 month")) +
theme_bw() +
guides(fill=FALSE) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
g2
pdf("grafico02.pdf")
g2
dev.off()
# analise a cada dia da semana
ggplot(data=dados, aes(x=GrupoDiaSemana, y=Weight, group=GrupoDiaSemana, fill=GrupoDiaSemana)) +
labs(x="Dia da Semana", y="Peso (kg)") +
geom_boxplot() +
scale_fill_manual("Dia da Semana", values=rep(wes_palette(3, name="Royal1"), 20)[1:length(unique(dados$GrupoDiaSemana))]) +
scale_y_continuous(breaks = round(seq(floor(min(dados$Weight)), ceiling(max(dados$Weight)), by=1), 1), limits=c(min(dados$Weight), max(dados$Weight))) +
guides(fill=FALSE) +
theme_bw()
# descritivas
dados %>%
group_by(Year, Month) %>%
summarise(Mediana=median(Weight), Média=mean(Weight)) %>%
mutate(Data=ymd(paste(Year, Month, 01, sep="-"))) %>%
select(Data, Média, Mediana) %>%
print(n=Inf)
dados %>%
arrange(Weight) %>%
select(Day, Month, Year, Weight, GrupoDiaSemana) %>%
print(n=20)
dados %>%
arrange(Weight) %>%
select(Day, Month, Year, Weight, GrupoDiaSemana) %>%
print(n=20) %>%
filter(Weight < 71)
dados %>%
arrange(Weight) %>%
head(n=20) %>%
group_by(Year) %>%
count()
dados %>%
arrange(Weight) %>%
head(n=50) %>%
count(GrupoDiaSemana) %>%
arrange(desc(n))
dados %>%
filter(Year==2017) %>%
arrange(Weight) %>%
head(n=30) %>%
count(GrupoDiaSemana) %>%
arrange(desc(n))
#######################################
### analise usando series temporais ###
#######################################
# arima - melhorar visualização
ajuste.arima <- auto.arima(dados$Weight, max.p=10, max.q=10, max.d=3, seasonal=TRUE, ic="aicc")
tsdiag(ajuste.arima)
plot(forecast(ajuste.arima, h=20))
